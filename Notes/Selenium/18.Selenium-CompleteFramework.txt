COMPLETE FRAMEWORK DESIGN:
-----------------------------
1. Create Maven Project
2. Create Page Object files
3. Implement reusable utilities and centralized variables
4. Writing Testcases
5. Convert project in to TestNg
6. Implement Data driving and parametrizing
7. Build Excellent HTML reports


CREATE MAVEN PROJECT:
------------------------
1. File ---> New ---> Project ---> Maven Project ---> Click on "Create a Simple project"
2. Enter the Group Id and Artifact Id and click on finish
3. Open the pom.xml file and give the following dependencies
<dependencies>
		<dependency>
			<groupId>org.seleniumhq.selenium</groupId>
			<artifactId>selenium-java</artifactId>
			<version>3.141.59</version>
		</dependency>

		<dependency>
			<groupId>org.testng</groupId>
			<artifactId>testng</artifactId>
			<version>6.8</version>
			<scope>test</scope>
		</dependency>
	</dependencies>

4. Under src/main/java create a package as "resources" and create a class called "Base"
5. Under src/main/java/resources create a file as "data.properties" and enter browser = chrome
6. Under base class write method to invoke browser given in the properties


Base Class Eg:
---------------
package resources;

import java.io.FileInputStream;
import java.util.Properties;
import java.util.concurrent.TimeUnit;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.ie.InternetExplorerDriver;

public class Base {
	public WebDriver driver;
	public Properties prop;
	
	public WebDriver initializeDriver() throws Exception 
	{
		prop = new Properties();
		FileInputStream fis = new FileInputStream("C:\\Users\\Vignesh\\WorkSpace\\RealtimeFrameworkOwnPractice\\src\\main\\java\\resources\\data.properties");
		prop.load(fis);
		String browserName = prop.getProperty("browser");
	
	if(browserName.equals("chrome")){
		System.setProperty(	"webdriver.chrome.driver", "G:\\Softwares-exe\\Studies\\Selenium\\drivers\\chromedriver_win32\\chromedriver.exe");
		driver =new ChromeDriver();
	}
	else if(browserName.equals("firefox")){
		System.setProperty(	"webdriver.gecko.driver", "G:\\Softwares-exe\\Studies\\Selenium\\drivers\\geckodriver-v0.24.0-win64\\geckodriver.exe");
		driver =new FirefoxDriver();
	}
	else if (browserName.equals("internetExplorer")){
		System.setProperty(	"webdriver.ie.driver", "G:\\Softwares-exe\\Studies\\Selenium\\drivers\\IEDriverServer_x64_3.14.0\\IEDriverServer.exe");
		driver =new InternetExplorerDriver();
	}
	driver.manage().timeouts().implicitlyWait(20, TimeUnit.SECONDS);
	return driver;
	}
}


CREATE PAGE OBJECT FILES:
----------------------------
1. Under src/main/java create a package as "pages"
2. Create a class as "HomePage"
3. Create page objects for all the elements in the homepage
4. Create corresponding methods to use the elements created such as getLogin
5. Create a class as "LoginPage"
6. Create page objects for all the elements in the login page
7. Create corresponding methods to use the elements created such as getEmail, getPassword
8. Create a test case and automate to go to homepage and click on login and go to loginPage and enter email id and password

HomePage Eg:
------------
package pages;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import resources.Base;

public class HomePage extends Base {
	
	public WebDriver driver;
	
	public HomePage(WebDriver driver) {
		this.driver = driver;
	}
	
	By signIn = By.cssSelector("a[href*='sign_in']");
	
	public WebElement getLogin() {
		return driver.findElement(signIn);
	}
}


LoginPage Eg:
------------
package pages;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import resources.Base;

public class LoginPage extends Base {
	
	public WebDriver driver;
	
	public LoginPage(WebDriver driver) {
		this.driver = driver;
	}
	
	By email = By.id("user_email");
	By password = By.id("user_password");
	By loginButton = By.cssSelector("input[type='submit']");
	
	public WebElement getEmail() {
		return driver.findElement(email);
	}
	
	public WebElement getPassword() {
		return driver.findElement(password);
	}
	
	public WebElement getLoginButton() {
		return driver.findElement(loginButton);
	}
}

HomePageTest Eg:
------------------
package testcases;

import org.testng.annotations.Test;
import pages.HomePage;
import pages.LoginPage;

public class HomePageTest extends resources.Base{
	
	@Test
	public void loginPageNavigation() throws Exception {
		driver = initializeDriver();
		driver.get(prop.getProperty("url"));
		HomePage home = new HomePage(driver);
		home.getLogin().click();
		LoginPage login = new LoginPage(driver);
		login.getEmail().sendKeys("abc@123.com");
		login.getPassword().sendKeys("password123");
		login.getLoginButton().click();
	}
}


PARAMETRIZING THE DATA:
-----------------------
Use Data Provider and pass the needed value

HomePageTest Eg:
------------------

package testcases;

import org.testng.Assert;
import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;
import pages.HomePage;
import pages.LoginPage;


public class HomePageTest extends resources.Base{
	
	@Test(dataProvider="getData")
	public void loginPageNavigation(String uname, String pswd) throws Exception {
		driver = initializeDriver();
		driver.get(prop.getProperty("url"));
		HomePage home = new HomePage(driver);
		Assert.assertEquals(driver.getTitle(), "QA Click Academy | Selenium,Jmeter,SoapUI,Appium,Database testing,QA Training Academy", "Wrong Title");
		home.getLogin().click();
		LoginPage login = new LoginPage(driver);
		login.getEmail().sendKeys(uname);
		login.getPassword().sendKeys(pswd);
		login.getLoginButton().click();
		Assert.assertEquals(driver.getTitle(), "QaClickAcademy", "Wrong Title");
		driver.quit();
	}
	
	@DataProvider
	public Object[][] getData() {
		//Row stands for how many times should the @Test going to run
		//Col stands for how many data going to be passed for one run
		Object[][] data = new Object[2][2];
		data[0][0]="abc@gmail.com";
		data[0][1]="passwordabc";
		data[1][0]="123@gmail.com";
		data[1][1]="password123";
		return data;
	}
}


ADD BEFOREMETHOD AND AFTERMETHOD ANNOTATIONS:
-----------------------------------------
On each Test case add beforemethod to initialize browser and aftermethod to close browser

HomePageLandingTest Eg:
----------------------
package testcases;

import org.testng.Assert;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Test;

public class HomePageLandingTest extends resources.Base{
	
	@BeforeMethod
	public void initializeBrowser() throws Exception {
		driver = initializeDriver();
		driver.get(prop.getProperty("url"));
	}
	
	@Test(dataProvider="getData")
	public void loginPageNavigation(){
		Assert.assertEquals(driver.getTitle(), "QA Click Academy | Selenium,Jmeter,SoapUI,Appium,Database testing,QA Training Academy", "Wrong Title");
	}
	
	@AfterMethod
	public void tearDown() {
		driver.quit();
	}
	
}

CREATE TESTNG XML TO RUN TESTCASE:
------------------------------------
1. Right click on the project and click on TestNg --> Conver to TestNg
2. Click on Finish to create the xml
3. To run all the testcase at one go --> Right click on the xml --> Run as ---> TestNg Suite


TESTNG AND MAVEN INTEGRATION:
---------------------------
1. To run the testcases present in the testng.xml file from maven pom.xml, paste the below code in the pom.xml

<properties>
    <maven.compiler.source>1.6</maven.compiler.source>
    <maven.compiler.target>1.6</maven.compiler.target>
</properties>
<build>
	<plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>3.0.0-M3</version>
        <configuration>
          <suiteXmlFiles>
            <suiteXmlFile>testng.xml</suiteXmlFile>
          </suiteXmlFiles>
        </configuration>
      </plugin>
</plugins>
</build>

Note : We are using the properties as because the latest maven does not support with 1.5

2. Right click on the pom.xml --> Maven ---> Maven Install
3. For first time it will intall all the maven needed dependencies and will compile maven and then will start executing the test cases
4. From 2nd time we can give Maven ---> Maven Test to execute the test case


TAKE SCREENSHOT ON FAILED TESTCASE:
-------------------------------------
1. Add Screenshot code in the base class as below

public static void getScreenShot(String ImageName) {
		TakesScreenshot ts = (TakesScreenshot)driver;
		File src = ts.getScreenshotAs(OutputType.FILE);
		try {
			FileUtils.copyFile(src, new File("./Screenshots/"+ImageName+".png"));
		} catch (Exception e) {
			e.printStackTrace();
			System.out.println("Exception while taking screenshot is "+e.getMessage());
		}
	}
	
Note : Right Click on the project --> Properties --> Java Build path --> Under Libraries tab ---> Click on Add Library ---> Add TestNg library	

2. Under resources --> Create a class "Listeners" and implements this with ITestListener interface
3. Add all unimplemented methods and under "onTestFailure" method, write code to take screenshot(Call it from Base class)

package resources;

import org.testng.ITestContext;
import org.testng.ITestListener;
import org.testng.ITestResult;

public class Listeners implements ITestListener {
	
	Base b = new Base();

	public void onTestStart(ITestResult result) {
		// TODO Auto-generated method stub
	}

	public void onTestSuccess(ITestResult result) {
		// TODO Auto-generated method stub	
	}

	public void onTestFailure(ITestResult result) {
		b.getScreenShot(result.getName());
	}

	public void onTestSkipped(ITestResult result) {
		// TODO Auto-generated method stub
	}

	public void onTestFailedButWithinSuccessPercentage(ITestResult result) {
		// TODO Auto-generated method stub
	}

	public void onStart(ITestContext context) {
		// TODO Auto-generated method stub	
	}

	public void onFinish(ITestContext context) {
		// TODO Auto-generated method stub	
	}
}
 
4. Add the listeners tag in the tesng.xml as
<listeners>
<listener class-name="resources.Listeners"></listener>
</listeners>

5. Right click on testng.xml --> TestNG Suite
6. Once the test ran fully right click on the project and click refresh
7. There will be a folder created as Screenshots and if there are any method failed in test case then that method screenshot will be present in Screenshots folder


EXTENT REPORTS:
-------------------
1. Add the Extent report dependancy in the pom.xml
<dependency>
    <groupId>com.relevantcodes</groupId>
    <artifactId>extentreports</artifactId>
    <version>2.41.2</version>
</dependency>

2. In resources package create a class "ExtentReporter" and paste the following code

package resources;

import java.io.File;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Map;
import org.testng.IReporter;
import org.testng.IResultMap;
import org.testng.ISuite;
import org.testng.ISuiteResult;
import org.testng.ITestContext;
import org.testng.ITestResult;
import org.testng.xml.XmlSuite;
import com.relevantcodes.extentreports.ExtentReports;
import com.relevantcodes.extentreports.ExtentTest;
import com.relevantcodes.extentreports.LogStatus;
 
public class ExtentReporter implements IReporter {
    private ExtentReports extent;
 
    public void generateReport(List<XmlSuite> xmlSuites, List<ISuite> suites, String outputDirectory) {
        extent = new ExtentReports(outputDirectory + File.separator + "ExtentReportsTestNG.html", true);
 
        for (ISuite suite : suites) {
            Map<String, ISuiteResult> result = suite.getResults();
 
            for (ISuiteResult r : result.values()) {
                ITestContext context = r.getTestContext();
 
                buildTestNodes(context.getPassedTests(), LogStatus.PASS);
                buildTestNodes(context.getFailedTests(), LogStatus.FAIL);
                buildTestNodes(context.getSkippedTests(), LogStatus.SKIP);
            }
        }
 
        extent.flush();
        extent.close();
    }
 
    private void buildTestNodes(IResultMap tests, LogStatus status) {
        ExtentTest test;
 
        if (tests.size() > 0) {
            for (ITestResult result : tests.getAllResults()) {
                test = extent.startTest(result.getMethod().getMethodName());
 
                /*test.getTest(). = getTime(result.getStartMillis());
                test.getTest().endedTime = getTime(result.getEndMillis());*/
 
                for (String group : result.getMethod().getGroups())
                    test.assignCategory(group);
 
                String message = "Test " + status.toString().toLowerCase() + "ed";
 
                if (result.getThrowable() != null)
                    message = result.getThrowable().getMessage();
 
                test.log(status, message);
 
                extent.endTest(test);
            }
        }
    }
 
    private Date getTime(long millis) {
        Calendar calendar = Calendar.getInstance();
        calendar.setTimeInMillis(millis);
        return calendar.getTime();        
    }
}

3. In the testng.xml add listener to the Extenet Report as below
<listener class-name="resources.ExtentReporter"></listener>

4. Right click on the testng.xml --> Run as ---> TestNG Suite
5. Once the test case finished running --> Right click on the project and refresh
6. Open the test-output folder --> And open the ExtentReportsTestNG.html in the browser